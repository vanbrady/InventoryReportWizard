import pandas as pd
import numpy as np

def load_and_process_inventory(file_path):
    # Load the Excel file
    inventory_data = pd.ExcelFile(file_path)

    # Load the "Inventario" and "Outlet" sheets
    inventario_df = inventory_data.parse('Inventario')
    outlet_df = inventory_data.parse('Outlet')

    # Rename columns for standardization in inventario_df
    inventario_df.rename(columns={
        'Codigo': 'Item_Number',
        'Descripcion': 'Description',
        'Stock': 'Units_Sold',
        'Precio Sala': 'Floor_Price',
        'Outlet': 'Outlet_Price'
    }, inplace=True)

    # Rename columns for standardization in outlet_df
    outlet_df.rename(columns={
        'Número de artículo': 'Item_Number',
        'Descripción del artículo': 'Description',
        'Total anual': 'Total_Annual_Sales',
        'Stock al 1 de oct': 'Units_In_Stock'
    }, inplace=True)

    # Convert columns to numeric, replacing errors with NaN and then filling with 0
    inventario_df['Outlet_Price'] = pd.to_numeric(inventario_df['Outlet_Price'], errors='coerce').fillna(0)
    inventario_df['Units_Sold'] = pd.to_numeric(inventario_df['Units_Sold'], errors='coerce').fillna(0)
    inventario_df['Floor_Price'] = pd.to_numeric(inventario_df['Floor_Price'], errors='coerce').fillna(0)
    outlet_df['Units_In_Stock'] = pd.to_numeric(outlet_df['Units_In_Stock'], errors='coerce').fillna(0)

    # Calculate total sales at Outlet and Floor Prices
    inventario_df['Total_Sales_Outlet_Price'] = inventario_df['Outlet_Price'] * inventario_df['Units_Sold']
    inventario_df['Total_Sales_Floor_Price'] = inventario_df['Floor_Price'] * inventario_df['Units_Sold']

    # Calculate Average Selling Price
    inventario_df['Average_Selling_Price'] = inventario_df['Total_Sales_Outlet_Price'] / inventario_df['Units_Sold']
    inventario_df['Average_Selling_Price'].replace([np.inf, -np.inf], 0, inplace=True)  # Replace infinite values with 0

    # Calculate Average Discount Applied
    inventario_df['Discount_Percentage'] = ((inventario_df['Floor_Price'] - inventario_df['Outlet_Price']) / inventario_df['Floor_Price']) * 100
    inventario_df['Discount_Percentage'].replace([np.inf, -np.inf], 0, inplace=True)  # Replace infinite values with 0

    # Sum of Units Sold from outlet_df (assuming you want to sum all monthly columns)
    monthly_columns = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre']
    outlet_df['Total_Units_Sold'] = outlet_df[monthly_columns].sum(axis=1)

    # Create and calculate Beginning Inventory
    outlet_df['Beginning_Inventory'] = outlet_df[monthly_columns].sum(axis=1) + outlet_df['Units_In_Stock']

    # Calculate Inventory Turnover
    cost_of_goods_sold = inventario_df['Units_Sold'] * inventario_df['Outlet_Price']
    average_inventory = (outlet_df['Beginning_Inventory'] + outlet_df['Units_In_Stock']) / 2
    inventory_turnover = cost_of_goods_sold / average_inventory
    inventory_turnover.replace([np.inf, -np.inf], 0, inplace=True)  # Replace infinite values with 0

    # Calculate Sell-Through Rate
    sell_through_rate = (inventario_df['Units_Sold'] / (inventario_df['Units_Sold'] + outlet_df['Units_In_Stock'])) * 100
    sell_through_rate.replace([np.inf, -np.inf], 0, inplace=True)  # Replace infinite values with 0

    # Calculate Stock to Sales Ratio
    inventory_value = outlet_df['Units_In_Stock'] * inventario_df['Outlet_Price']
    total_sales = inventario_df['Total_Sales_Outlet_Price']
    stock_to_sales_ratio = inventory_value / total_sales
    stock_to_sales_ratio.replace([np.inf, -np.inf], 0, inplace=True)  # Replace infinite values with 0

    # Calculate Inventory Coverage
    inventory_coverage = outlet_df['Units_In_Stock'] / (inventario_df['Units_Sold'] / 30)
    inventory_coverage.replace([np.inf, -np.inf], 0, inplace=True)  # Replace infinite values with 0

    # Identify Best-Selling and Least-Selling Products
    best_selling_product = inventario_df.loc[inventario_df['Units_Sold'].idxmax()]
    least_selling_product = inventario_df.loc[inventario_df['Units_Sold'].idxmin()]

    # Identify Items that have not been sold
    unsold_items = inventario_df[inventario_df['Units_Sold'] == 0]

    # Print results
    print("Total Sales at Outlet Price: ", inventario_df['Total_Sales_Outlet_Price'].sum())
    print("Total Sales at Floor Price: ", inventario_df['Total_Sales_Floor_Price'].sum())
    print("Total Units Sold: ", outlet_df['Total_Units_Sold'].sum())
    print("Average Selling Price: ", inventario_df['Average_Selling_Price'].mean())
    print("Average Discount Applied: ", inventario_df['Discount_Percentage'].mean())
    print("Inventory Turnover: ", inventory_turnover.mean())
    print("Sell-Through Rate: ", sell_through_rate.mean())
    print("Stock to Sales Ratio: ", stock_to_sales_ratio.mean())
    print("Inventory Coverage: ", inventory_coverage.mean())
    print("Best-Selling Product: ", best_selling_product['Description'], "with", best_selling_product['Units_Sold'], "units sold.")
    print("Least-Selling Product: ", least_selling_product['Description'], "with", least_selling_product['Units_Sold'], "units sold.")
    print("Items not sold: ", unsold_items['Description'].tolist())

    # Print column names of the final DataFrames
    #print("Inventario DataFrame Columns: ", inventario_df.columns.tolist())
    #print("Outlet DataFrame Columns: ", outlet_df.columns.tolist())

    # Return DataFrames for further analysis if needed
    return inventario_df, outlet_df

# Set the path to your Excel file
file_path = "/Users/billbrady/Documents/GitHub/CrewAITest/crewaitest/Arqdeco_data.xlsx"
inventario_df, outlet_df = load_and_process_inventory(file_path)